{
  "hash": "fd802bd4ff6e4d120797aa60292ad012",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Ecosystem Science and Sustainability 330\"\nauthor:\n  - name: Zachary Cramton\nformat: html\nsubtitle: 'Quantitative Reasoning for Ecosystem Science'\n---\n\n\n\n\n\n## COVID-19 Data\n\n### Data\n\nWe are going to practice some data wrangling skills using a real-world dataset about COVID cases curated and maintained by the New York Times. The data has been used to create reports and data visualizations like [this](https://www.nytimes.com/interactive/2020/us/coronavirus-spread.html?referringSource=articleShare), and are archived on a GitHub repo [here](https://github.com/nytimes/covid-19-data). Looking at the README in this repository we read:\n\n> \"We are providing two sets of data with cumulative counts of coronavirus cases and deaths: one with our most current numbers for each geography and another with historical data showing the tally for each day for each geography ... the historical files are the final counts at the end of each day ... The historical and live data are released in three files, one for each of these geographic levels: U.S., states and counties. A smaller file with only the most recent 30 days of data is also available\"\n\nFor this lab we will use the historic, recent, country level data which is stored as an updating CSV at this URL:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhttps://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties-recent.csv\n```\n:::\n\n\n\n### Start\n\nI will get you started this week, in the following code chunk, I am attaching the tidyverse package; saving the NY-Times URL as a value called \"url\"; and I am reading that URL into an object called `covid`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nurl = 'https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties-recent.csv'\ncovid = read_csv(url)\nhead(covid, 5)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 6\n  date       county  state   fips  cases deaths\n  <date>     <chr>   <chr>   <chr> <dbl>  <dbl>\n1 2023-02-22 Autauga Alabama 01001 19732    230\n2 2023-02-22 Baldwin Alabama 01003 69641    724\n3 2023-02-22 Barbour Alabama 01005  7451    112\n4 2023-02-22 Bibb    Alabama 01007  8067    109\n5 2023-02-22 Blount  Alabama 01009 18616    261\n```\n\n\n:::\n:::\n\n\n\nHint: You can print the top X rows of a `data.frame` with `slice`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nslice(covid, 1:5)\n```\n:::\n\n\n\nto print the top 5 columns of the raw covid `object` \n\n## Question 1: \n\nUse `dplyr` verbs to  create a data.frame of the **5** counties with the most current cases. Remember, the cases and deaths are cumulative, so you only need to deal with the data for the most current (`max`) date.\n\n(**Hint:** `filter`, `arrange`,  `slice`)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Find the most recent date\nmax_date <- max(covid$date)\nmost_recent_data <- filter(covid, date == max_date)\n\n# Get the 5 counties with the most cases\ntop_5_counties_cases <- most_recent_data %>%\n  arrange(desc(cases)) %>% \n  slice(1:5)\n\ntop_5_counties_cases\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 6\n  date       county        state      fips    cases deaths\n  <date>     <chr>         <chr>      <chr>   <dbl>  <dbl>\n1 2023-03-23 Los Angeles   California 06037 3723182  35960\n2 2023-03-23 New York City New York   <NA>  3252967  45123\n3 2023-03-23 Miami-Dade    Florida    12086 1547142  12324\n4 2023-03-23 Cook          Illinois   17031 1541156  15884\n5 2023-03-23 Maricopa      Arizona    04013 1533874  18877\n```\n\n\n:::\n:::\n\n\n\n## Question 2: \n\nUse `dplyr` verbs to create a data.frame of the **5** states with the _most_ cases current cases. \n\n(**Hint:** `filter`, `group_by`, `summarize`, `arrange`, `slice`)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Summarize total cases per state for current data\ntop_5_states_cases <- most_recent_data %>% \n  group_by(state) %>% \n  summarize(total_cases = sum(cases, na.rm = TRUE)) %>%\n  arrange(desc(total_cases)) %>%\n  slice(1:5)\n\ntop_5_states_cases\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 2\n  state      total_cases\n  <chr>            <dbl>\n1 California    12169158\n2 Texas          8447233\n3 Florida        7542869\n4 New York       6805271\n5 Illinois       4107931\n```\n\n\n:::\n:::\n\n\n\n## Question 3: \n\nUse the `dplyr` verbs to report the **5** counties with the _worst_ current death/cases ratio: (e.g.$100* (deaths/cases)$)\n\n(**Hint:** You will need to remove those where `cases == 0` and `county == Unknown`)\n(**Hint:** `filter`, `mutate`, `arrange`, `slice`)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Calculate death/case ratio for counties;\n  # Exclude counties with no cases or missing data\nworst_counties_ratio <- most_recent_data %>% \n  filter(cases > 0, county != \"Unknown\") %>% \n  mutate(death_case_ratio = (deaths / cases)) %>%\n  arrange(desc(death_case_ratio)) %>% \n  slice(1:5)\n\nworst_counties_ratio\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 7\n  date       county   state    fips  cases deaths death_case_ratio\n  <date>     <chr>    <chr>    <chr> <dbl>  <dbl>            <dbl>\n1 2023-03-23 Storey   Nevada   32029   197     14           0.0711\n2 2023-03-23 Sabine   Texas    48403  1672     94           0.0562\n3 2023-03-23 McMullen Texas    48311   196     11           0.0561\n4 2023-03-23 Blaine   Nebraska 31009    76      4           0.0526\n5 2023-03-23 Grant    Nebraska 31075   114      6           0.0526\n```\n\n\n:::\n:::\n\n\n\n## Question 4: \n\nUse the `dplyr` verbs to report the **5** states with the _worst_ current death/case ratio.\n\n(**Hint:** `filter`, `group_by`, `summarize`, `mutate`, `arrange`, `slice`)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Caclulate death/case ratio for states\n  # Exclude states with 0 cases\nworst_states_ratio <- most_recent_data %>% \n  filter(cases > 0) %>%                       # Remove states with 0 cases\n  group_by(state) %>% \n  summarize(\n    total_cases = sum(cases, na.rm = TRUE),   # Total cases per state\n    total_deaths = sum(deaths, na.rm = TRUE)  # Total deaths per state\n  ) %>%\n  mutate(death_case_ratio = 100 * (total_deaths / total_cases)) %>% \n  arrange(desc(death_case_ratio)) %>%         # Sort by death to case ratio, highest to lowest\n  slice(1:5)\n\nworst_states_ratio\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 4\n  state        total_cases total_deaths death_case_ratio\n  <chr>              <dbl>        <dbl>            <dbl>\n1 Pennsylvania     3539135        50701             1.43\n2 Michigan         3068195        42311             1.38\n3 Georgia          2984923        41056             1.38\n4 Nevada            892814        12093             1.35\n5 Arizona          2451062        33190             1.35\n```\n\n\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}